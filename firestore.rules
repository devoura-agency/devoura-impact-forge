rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isValidEmail(email) {
      return email is string && email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidTimestamp(value) {
      return value is timestamp;
    }

    // Public read access to website templates
    match /websites/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Form submissions - public create, authenticated read own, admin read all
    match /request-call/{document} {
      allow create: if true;
      allow read: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    match /wizard-submissions/{document} {
      allow create: if true;
      allow read: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    match /contacts/{document} {
      allow create: if true;
      allow read: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Email system collections with data validation
    match /bulkEmailBatches/{document} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['recipients', 'status', 'createdAt']) &&
        request.resource.data.recipients is list &&
        request.resource.data.status is string &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /emailErrors/{document} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['recipient', 'error', 'timestamp']) &&
        isValidEmail(request.resource.data.recipient) &&
        request.resource.data.error is string &&
        isValidTimestamp(request.resource.data.timestamp);
      allow update, delete: if isAdmin();
    }
    
    match /emailHistory/{document} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['recipient', 'status', 'sentAt']) &&
        isValidEmail(request.resource.data.recipient) &&
        request.resource.data.status is string &&
        isValidTimestamp(request.resource.data.sentAt);
      allow update, delete: if isAdmin();
    }
    
    match /scheduledEmails/{document} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['recipient', 'scheduledFor', 'status']) &&
        isValidEmail(request.resource.data.recipient) &&
        isValidTimestamp(request.resource.data.scheduledFor) &&
        request.resource.data.status is string;
      allow update, delete: if isAdmin();
    }
    
    match /emailAnalytics/{document} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['recipient', 'timestamp', 'event']) &&
        isValidEmail(request.resource.data.recipient) &&
        isValidTimestamp(request.resource.data.timestamp) &&
        request.resource.data.event is string;
      allow update, delete: if isAdmin();
    }

    // Admin management
    match /admins/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId || isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 